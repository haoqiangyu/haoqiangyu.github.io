<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flutter小技巧(译)</title>
    <url>/2020/07/15/flutter%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>本文章总结了flutter开发中常用的一些小技巧，目前的内容为<a href="https://github.com/erluxman/awesomefluttertips" target="_blank" rel="noopener">awesomefluttertips</a>的译文（在每个小点上可能也会添加一些我自己的理解），后续会添加我自己理解的一些flutter小技巧，持续更新。</p>
<h2 id="1-stless-和-stful"><a href="#1-stless-和-stful" class="headerlink" title="#1 stless 和 stful"></a>#1 <code>stless</code> 和 <code>stful</code></h2><p>我们可以输入“ stless”和“ stful”，然后编辑器会自动分别生成无状态Flutter Widget或有状态Flutter Widget。</p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/01stlesstful.gif" alt="statful"></p>
<h2 id="2-If-Null-操作符"><a href="#2-If-Null-操作符" class="headerlink" title="#2 If Null 操作符 (??)"></a>#2 <code>If Null</code> 操作符 (<code>??</code>)</h2><p><code>??</code> 检查是否为 <code>null</code>。 如果不为<code>null</code>，则返回其自身的值；如果为<code>null</code>，则返回在<code>??</code>之后的值。</p>
<p><code>return abc??10; //abc如果为null返回10，否则返回起本身的值,</code></p>
<p>当它为<code>null</code>时，也可以给它赋值。</p>
<p><code>abc??=5 //如果abc为null，则将5分配给abc</code></p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/02ifnull.png" alt="null"></p>
<h2 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="#3 内置函数"></a>#3 内置函数</h2><p>可以在一个函数内部定义另一个函数</p>
<p>这是为了将内置函数与其外部的函数的其他内容封装在一起。</p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/03functions.png" alt="functions"></p>
<h2 id="4-级联链接符号-Fluent-API"><a href="#4-级联链接符号-Fluent-API" class="headerlink" title="#4 ..级联链接符号 Fluent API"></a>#4 ..级联链接符号 Fluent API</h2><p>类中的方法或者成员变量(<strong>method(), getter() and setter()</strong>)不用return <code>this</code> ,就可以直接链接方法和成员变量。</p>
<p>在 <a href="https://dartpad.dartlang.org/290e17306b745ed83b9242653ca55041" target="_blank" rel="noopener">Dartpad</a>中测试下</p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/04cascadebefore.png" alt="cascade"></p>
<p>可以改成</p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/04cascadeafter.png" alt="cascadeafter"></p>
<h2 id="5-Dart-编辑器插件-data-class"><a href="#5-Dart-编辑器插件-data-class" class="headerlink" title="#5 Dart 编辑器插件 data class"></a>#5 Dart 编辑器插件 <code>data class</code></h2><p>Dart默认情况下不支持数据类（data class），但是使用这个插件，我们可以简单的生成数据类(工具实现的方法<code>copyWith()</code>,<code>fromMap()</code>, <code>toMap()</code>, <code>Named Constructor</code>, <code>toString()</code>,<code>hashCode()</code> &amp; <code>equals()</code>)。</p>
<h3 id="🚨❗️注意❗️🚨-光标应在要生成的数据类内"><a href="#🚨❗️注意❗️🚨-光标应在要生成的数据类内" class="headerlink" title="🚨❗️注意❗️🚨 : 光标应在要生成的数据类内."></a><code>🚨❗️注意❗️🚨</code> : <strong>光标应在要生成的数据类内.</strong></h3><p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/05dataclass.gif" alt="dataclass"></p>
<p>下载插件 :</p>
<p><a href="https://plugins.jetbrains.com/plugin/12429-dart-data-class" target="_blank" rel="noopener">For Android Studio</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=BendixMa.dart-data-class-generator" target="_blank" rel="noopener">For VsCode</a></p>
<h2 id="6-RichText-Widget-富文本"><a href="#6-RichText-Widget-富文本" class="headerlink" title="#6 RichText Widget 富文本"></a>#6 RichText Widget 富文本</h2><p>如果你想要在一行文本使用不同的样式，不用去尝试<code>Text()</code>了，使用<code>RichText()</code>和<code>TextSpan()</code></p>
<p><a href="https://dartpad.dartlang.org/f87dddb2f48f1d1ef0f25903af1ded58" target="_blank" rel="noopener">在dartpad上尝试</a></p>
<p><a href="https://www.youtube.com/watch?v=rykDVh-QFfw" target="_blank" rel="noopener">视频demo</a></p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/06richtext.png" alt="richtext"></p>
<h2 id="7-Spacer控件"><a href="#7-Spacer控件" class="headerlink" title="#7 Spacer控件"></a>#7 Spacer控件</h2><p>使用固定宽高的<code>Container()</code>创建行或列间等分的空隙？这样在一个固定尺寸的屏幕上看起来还OK，但是在不同尺寸屏幕上的表示并不一样。</p>
<p><code>Spacer</code>控件可以解决这个问题. <code>Container(width: / height: )</code>, 用 <code>Spacer(flex: )</code>代替<code>Container(width: / height: )</code>。</p>
<p>之前怎么不知道这个控件？会节省我很多时间 😂</p>
<p><a href="https://dartpad.dev/f0d077124527a8078cdb2eede1e9bf73" target="_blank" rel="noopener">在dartpad上尝试</a></p>
<p><a href="https://www.youtube.com/watch?v=7FJgd7QN1zI" target="_blank" rel="noopener">视频Demo</a></p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/07spacer.gif" alt="spacer"></p>
<h2 id="8-ListView-separated-分割-ListView"><a href="#8-ListView-separated-分割-ListView" class="headerlink" title="#8 ListView.separated() 分割 ListView"></a>#8 ListView.separated() 分割 ListView</h2><p>如果你在<code>ListItem</code>的底部添加带有<code>maxwidth</code>的<code>Container()</code>设置item的分割线，那么你一直做的都是错的。</p>
<p>Flutter提供了<code>ListView.separated</code>来实现这种效果。除了使用<code>ListView.builder</code>时已经传递的内容外，我们还必须提供<code>spacerBuilder</code>来设置用于分割内容，比如广告，分割线。同时，分割线在Flutter中已经提供了API——Divider()，当然，你一可以自定义项目中用来分割item的widget。</p>
<p><strong>提示 🍾🎁🎊🎉 : 这个API中的<code>spacerBuilder</code>默认不包括<code>ListView</code>的最后一个item下面</strong></p>
<p><a href="https://dartpad.dartlang.org/31ec967b140ac6a5795c38ea4bdfd9a2" target="_blank" rel="noopener">try in dartpad</a></p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/08separatedlist.png" alt="separated"></p>
<h2 id="9-像一个参数使用函数"><a href="#9-像一个参数使用函数" class="headerlink" title="#9 像一个参数使用函数"></a>#9 像一个参数使用函数</h2><p>我们可以像传递变量一样简单地将<strong>函数</strong>作为<strong>参数</strong>传递。当我们想从调用函数中调用传递的函数时，只要在参数末尾使用（）以及参数（如果它接受）就可以调用它。</p>
<p><strong>Dart中一切皆为对象，函数也不例外，你可以把Dart里面的函数也当作一个特殊的对象去理解。</strong></p>
<p><a href="https://dartpad.dev/fa46336f5c1b3287c6420d3b3a277178" target="_blank" rel="noopener">在dartpad上试试</a></p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/09functionargument.png" alt="functionargument"></p>
<hr>
<h2 id="10-相对导入：导入我们在lib包中的-dart文件的正确方法"><a href="#10-相对导入：导入我们在lib包中的-dart文件的正确方法" class="headerlink" title="#10 相对导入：导入我们在lib包中的.dart文件的正确方法"></a>#10 相对导入：导入我们在lib包中的<code>.dart</code>文件的正确方法</h2><p>有没有想过用自己的包导入文件的正确方法是什么？</p>
<p>相对导入优先于绝对导入。</p>
<p>为什么呢?</p>
<ul>
<li>代码更短更整洁。</li>
<li>我们可以轻松区分我们的文件和第三方插件.</li>
<li>这是有道理的，不是吗？</li>
</ul>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/10import.png" alt="import"></p>
<h2 id="11-复用-Text-Style"><a href="#11-复用-Text-Style" class="headerlink" title="#11 复用 Text Style"></a>#11 复用 Text Style</h2><p>Tired of defining <code>textStyle</code> everytime you want to customize <code>Text</code>? <strong>Even worse</strong> if you have multiple theme (<strong>dark, light, full black theme etc</strong>).</p>
<p>每次想要自定义<code>Text</code>时都需要定义<code>textStyle</code>，厌倦了吗？ <strong>更糟糕的是</strong>，项目中有多个主题(<strong>dark, light, full black theme 等等</strong>)。</p>
<p>像这样使用</p>
<p><code>Theme.of(context).textTheme.title</code></p>
<p>您可以在themeData中设置textTheme,将这些常量全局共享，有不一样的用Theme控件包裹，颜色值也是这样，让我们的代码的可读性和可维护性更强。</p>
<p><a href="https://dartpad.dartlang.org/5270714ce97853fc36db1b17c255c999" target="_blank" rel="noopener">在dartpad上试试</a></p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/11texttheme.png" alt="texttheme"></p>
<h2 id="12-集合初始化"><a href="#12-集合初始化" class="headerlink" title="#12 集合初始化"></a>#12 集合初始化</h2><p>如果要初始化可增长集合，请使用文字初始化而不是构造函数。</p>
<pre><code>// Good
var points = [];
var addresses = {};

// Bad
var points = List();
var addresses = Map();


// With type argument

// Good
var points = &lt;Point&gt;[];
var addresses = &lt;String, Address&gt;{};

// Bad
var points = List&lt;Point&gt;();
var addresses = Map&lt;String, Address&gt;();</code></pre><h2 id="Day13-箭头使用-gt"><a href="#Day13-箭头使用-gt" class="headerlink" title="#Day13 箭头使用 =&gt;"></a>#Day13 箭头使用 <code>=&gt;</code></h2><p>在dart中，我们可以使用 <code>=&gt;</code>构建 <code>function, getter,setter</code>等；</p>
<p>如果方法体不是<strong>一行</strong>，我不会使用，但是较少的行数也是可以的；</p>
<p><a href="https://dartpad.dev/76922028eccb4535f0cdddc8e4b17aa1" target="_blank" rel="noopener">在dartpad上试试</a></p>
<pre><code>void main() {
User()
    ..firstName = &quot;Laxman&quot;
    ..lastName = &quot; Bhattarai&quot;
    ..age = 18
    ..printUser();
}

class User {
String firstName;
String lastName;
DateTime birthday;

String get fullName =&gt; firstName + lastName;

set age(int age) =&gt;  birthday = DateTime.now().subtract(Duration(days: age * 365));

int get age =&gt; DateTime.now().year - birthday.year;

bool get isAdult =&gt; age &gt;= 18;

printUser() =&gt; print(fullName + &quot; is a ${isAdult ? &quot;Adult&quot; : &quot;Child&quot;}&quot;);
}</code></pre><h2 id="14-FractionallySizedBox"><a href="#14-FractionallySizedBox" class="headerlink" title="#14 FractionallySizedBox()"></a>#14 FractionallySizedBox()</h2><p>是否曾经希望过小部件的高度和宽度与屏幕的高度和宽度完全相同，或者完全依赖于屏幕？</p>
<p><code>FractionallySizedBox()</code>正是针对该用例而构建的。只需给出您所需的高度和宽度<strong>比例</strong>即可，它将处理其他所有问题。比例值值将介于0.0到1.0之间。</p>
<pre><code>FractionallySizedBox(
            widthFactor: 0.5,
            heightFactor: 0.5,
            child: Container(color: Colors.green),
        )</code></pre><p><a href="https://codepen.io/erluxman/pen/rNOLOzG" target="_blank" rel="noopener">在codepen上试试</a></p>
<p><img src="https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/14fractionallysizedbox.gif" alt="fractionally"></p>
]]></content>
  </entry>
</search>
